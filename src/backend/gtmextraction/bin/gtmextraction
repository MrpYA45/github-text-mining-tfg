#!/usr/bin/env python3

# Copyright (C) 2021 Pablo Fern√°ndez Bravo
#
# This file is part of github-text-mining-tfg.
#
# github-text-mining-tfg is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# github-text-mining-tfg is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with github-text-mining-tfg.  If not, see <http://www.gnu.org/licenses/>.

import logging
import sys
import time
from threading import Thread

from github.GithubException import BadCredentialsException, GithubException
from gtmcore.data.db import Schema
from gtmcore.data.db.enums import TaskState, TaskType
from gtmcore.data.db.err.tasknotexistserror import TaskNotExistsError
from gtmcore.data.db.results.task import Task
from gtmcore.logic.dbmanager import DBManager
from gtmextraction.logic.connections import GitHubConnection, GitHubManager
from gtmextraction.logic.connections.config.connconfiguration import \
    ConnConfiguration


class GTMExtraction():

    def __init__(self):
        schema: Schema = Schema()
        self.__db_manager: DBManager = DBManager(schema)
        self.__gh_conn: GitHubConnection = GitHubConnection()
        self.__gh_manager: GitHubManager = GitHubManager(
            self.__gh_conn, self.__db_manager)

        self.current_task: Task = None

    def run(self):
        logger.info("[GTMExtraction] Running...")
        while True:
            task = self.get_next_queued_task()
            if task and self.current_task is None:
                logger.debug(
                    "[GTMExtraction] NEW TASK FOUND. TASK_ID: %d | TASK_REPO: %s | CREATED AT: %s",
                    task.task_id, task.repo_dir, task.timestamp)

                self.__db_manager.update_task_state(
                    task.task_id, TaskState.IN_PROGRESS)

                self.current_task = task
                Thread(target=self.capture_repo_data, args=(task,)).start()

            time.sleep(10)

    def capture_repo_data(self, task: Task) -> bool:
        try:
            logger.debug(
                "[GTMExtraction] STARTING DATA EXTRACTION FROM REPO: %s", task.repo_dir)

            self.__gh_manager.get_repo_info(task.repo_dir)

            self.__gh_manager.get_repo_issues(
                task, self.check_is_task_outdated)

            self.__db_manager.update_task_state(task.task_id, TaskState.DONE)

            logger.debug(
                "[GTMExtraction] ENDING DATA EXTRACTION FROM REPO: %s", task.repo_dir)

            return True

        except BadCredentialsException:
            self.__db_manager.update_task_state(task.task_id, TaskState.QUEUED)
            logger.exception()
            sys.exit(
                "[GTMExtraction] INVALID GITHUB CREDENTIALS. CHECK '/config/gtmextraction/settings.json' FILE.")  # pylint: disable=line-too-long

        except GithubException:
            logger.exception(
                "[GTMExtraction] INVALID TASK. SET AS INVALID. REASON: GITHUB EXCEPTION.")
            self.__db_manager.update_task_state(task.task_id, TaskState.FAILED)

        except Exception:  # pylint: disable=broad-except
            logger.exception(
                "[GTMExtraction] INVALID TASK. SET AS INVALID. REASON: UNKNOWN EXCEPTION.")
            self.__db_manager.update_task_state(task.task_id, TaskState.FAILED)

        finally:
            self.current_task = None

    def check_is_task_outdated(self, old_task: Task):
        new_task: Task = self.__db_manager.get_latest_task_from_repo(
            old_task.repo_dir, TaskType.EXTRACTION)
        if old_task.timestamp != new_task.timestamp:
            self.__db_manager.update_task_state(
                old_task.task_id, TaskState.OUTDATED)
            return True
        return False

    def get_next_queued_task(self) -> Task:
        try:
            return self.__db_manager.get_oldest_task_with_state(
                TaskType.EXTRACTION,
                TaskState.QUEUED)
        except TaskNotExistsError:
            return None


if __name__ == "__main__":
    logger = logging.getLogger("gtmextraction")
    logging.basicConfig(filename="gtmextraction.log",
                        format="[%(levelname)s] %(asctime)s %(message)s",
                        datefmt="%m/%d/%Y %I:%M:%S %p", level=logging.DEBUG)
    logger.info("[GTMExtraction] INITIALIZING EXTRACTION MODULE... ")
    extractor = GTMExtraction()
    extractor.run()
