#!/usr/bin/env python3
import logging
import time
from threading import Thread

from gtmcore.data.db import Schema
from gtmcore.data.db.enums import TaskState, TaskType
from gtmcore.data.db.err.tasknotexistserror import TaskNotExistsError
from gtmcore.data.db.results.task import Task
from gtmcore.logic.dbmanager import DBManager
from gtmextraction.logic.connections import GitHubConnection, GitHubManager
from gtmextraction.logic.connections.config.connconfiguration import \
    ConnConfiguration


class GTMExtraction():

    def __init__(self):
        schema: Schema = Schema()
        self.__db_manager: DBManager = DBManager(schema)
        self.__gh_conn: GitHubConnection = GitHubConnection()
        self.__gh_manager: GitHubManager = GitHubManager(
            self.__gh_conn, self.__db_manager)

        self.current_task: Task = None

    def run(self):
        logger.info("[GTMExtraction] Running...")
        while True:
            task = self.get_next_queued_task()
            if task and self.current_task is None:
                logger.debug(
                    "[GTMExtraction] NEW TASK FOUND. TASK_ID: %d | TASK_REPO: %s | CREATED AT: %s",
                    task.task_id, task.repo_dir, task.timestamp)

                self.__db_manager.set_task_state(
                    task.task_id, TaskState.IN_PROGRESS)

                self.current_task = task
                Thread(target=self.capture_repo_data, args=(task,)).start()

                self.__db_manager.set_task_state(
                    task.task_id, TaskState.DONE)

            time.sleep(10)

    def capture_repo_data(self, task: Task) -> bool:
        logger.debug(
            "[GTMExtraction] STARTING DATA EXTRACTION FROM REPO: %s", task.repo_dir)

        if self.__gh_manager.get_repo_info(task.repo_dir):
            self.__gh_manager.get_repo_issues(
                task, self.check_is_task_outdated)
        else:
            return False

        self.current_task = None

        logger.debug(
            "[GTMExtraction] ENDING DATA EXTRACTION FROM REPO: %s", task.repo_dir)

        return True

    def check_is_task_outdated(self, old_task: Task):
        new_task: Task = self.__db_manager.get_lastest_task_from_repo(
            old_task.repo_dir, TaskType.EXTRACTION)
        if old_task.timestamp != new_task.timestamp:
            self.__db_manager.set_task_state(old_task.task_id, TaskState.OUTDATED)
            return True
        return False


    def get_next_queued_task(self) -> Task:
        try:
            return self.__db_manager.get_oldest_task_with_state(TaskType.EXTRACTION, TaskState.QUEUED)
        except TaskNotExistsError:
            return None


if __name__ == "__main__":
    logger = logging.getLogger("gtmextraction")
    logging.basicConfig(filename="gtmextraction.log",
                        format="[%(levelname)s] %(asctime)s %(message)s",
                        datefmt="%m/%d/%Y %I:%M:%S %p", level=logging.DEBUG)
    logger.info("[GTMExtraction] INITIALIZING EXTRACTION MODULE... ")
    extractor = GTMExtraction()
    extractor.run()
