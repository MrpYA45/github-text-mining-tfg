#!/usr/bin/env python3
import time

from gtmcore.data.db import Schema, TaskState
from gtmcore.data.db.results.task import Task
from gtmcore.logic.dbmanager import DBManager
from gtmextraction.logic.connections import GitHubConnection, GitHubManager
from gtmextraction.logic.connections.config.connconfiguration import \
    ConnConfiguration


class GTMExtraction():

    def __init__(self):
        config = ConnConfiguration()
        schema: Schema = Schema()
        self.db_manager: DBManager = DBManager(schema)
        gh_conn: GitHubConnection = GitHubConnection()
        self.gh_manager: GitHubManager = GitHubManager(
            gh_conn, self.db_manager)

    def run(self):
        while True:
            print("\nRunning")
            task = self.get_next_queued_task()
            print("Next Task: ", task)
            if task:
                print([task.repo_dir for task in self.db_manager.get_tasks()])
                self.db_manager.set_task_state(
                    task.repo_dir, TaskState.CAPTURING_DATA)
                self.capture_repo_data(task.repo_dir)
                self.db_manager.set_task_state(
                    task.repo_dir, TaskState.WAITING)
            time.sleep(10)

    def capture_repo_data(self, repo_dir: str) -> bool:
        self.__running = True
        title, description = self.gh_manager.get_repo_info(repo_dir)
        self.db_manager.create_repository(repo_dir, title, description)

        issues_data = self.gh_manager.get_repo_issues(repo_dir)
        for issue_data in issues_data:
            self.db_manager.create_issue(
                repo_dir,
                issue_data["id"],
                issue_data["title"],
                issue_data["description"],
                issue_data["labels"],
                issue_data["comments"],
                issue_data["is_pull_request"])
        return True

    def get_next_queued_task(self) -> Task:
        return self.db_manager.get_next_queued_task()


if __name__ == "__main__":
    extractor = GTMExtraction()
    extractor.run()
