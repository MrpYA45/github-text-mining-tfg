# Copyright (C) 2021 Pablo Fern√°ndez Bravo
#
# This file is part of github-text-mining-tfg.
#
# github-text-mining-tfg is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# github-text-mining-tfg is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with github-text-mining-tfg.  If not, see <http://www.gnu.org/licenses/>.

import logging
from pathlib import Path
from typing import List

from flask import Flask, json, jsonify, request
from flask.logging import default_handler
from flask_cors import CORS, cross_origin
from gtmcore.data.db.enums.taskstate import TaskState
from gtmcore.data.db.enums.tasktype import TaskType
from gtmcore.data.db.err import OutcomeNotExistsError, TaskNotExistsError, IssueNotExistsError
from gtmcore.data.db.results import Comment, Issue, Outcome, Repository, Task
from gtmcore.data.db.schema import Schema
from gtmcore.logic.dbmanager import DBManager

app_path: Path = Path("gtmapi/presentation/web").absolute()
app = Flask(__name__, root_path=app_path)
CORS(app, support_credentials=True)
root_logger = logging.getLogger()
root_logger.addHandler(default_handler)

schema: Schema = Schema()
db_manager: DBManager = DBManager(schema)


@app.route("/", methods=["GET"])
@cross_origin(supports_credentials=True)
def is_running():
    return ("", 200, {"Content-Type": "text/plain"})

@app.route("/task/<int:task_id>", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_task(task_id: int):
    try:
        task = db_manager.get_task(task_id)
        return jsonify(eqlts=json.loads(str(task)))
    except TaskNotExistsError:
        return ("", 404)
    except ValueError:
        return ("", 400)
    except Exception:  # pylint: disable=broad-except
        return ("", 500)

@app.route("/tasks/", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_all_tasks():
    try:
        tasks = db_manager.get_tasks()
        return jsonify(eqlts=[json.loads(str(task)) for task in tasks])
    except Exception:  # pylint: disable=broad-except
        return ("", 500)


@app.route("/repos/", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_all_repos() -> dict:
    try:
        repos = db_manager.get_repositories()
        return jsonify(eqlts=[json.loads(str(repo)) for repo in repos])
    except Exception:  # pylint: disable=broad-except
        return ("", 500)

@app.route("/issues/", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_all_issues() -> dict:
    try:
        issues = db_manager.get_issues()
        return jsonify(eqlts=[json.loads(str(issue)) for issue in issues])
    except Exception:  # pylint: disable=broad-except
        return ("", 500)


@app.route("/comments/", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_all_comments() -> dict:
    try:
        comments = db_manager.get_comments()
        return jsonify(eqlts=[json.loads(str(comment)) for comment in comments])
    except Exception:  # pylint: disable=broad-except
        return ("", 500)

@app.route("/outcome/<int:task_id>", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_outcome(task_id: int):
    try:
        outcome = db_manager.get_outcome(task_id)
        return jsonify(eqlts=json.loads(str(outcome)))
    except OutcomeNotExistsError:
        return ("", 404)
    except ValueError:
        return ("", 400)
    except Exception:  # pylint: disable=broad-except
        return ("", 500)

@app.route("/outcomes/", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_all_outcomes() -> dict:
    try:
        outcomes = db_manager.get_outcomes()
        return jsonify(eqlts=[json.loads(str(outcome)) for outcome in outcomes])
    except Exception:  # pylint: disable=broad-except
        return ("", 500)


@app.route("/extract/", methods=["POST"])
@cross_origin(supports_credentials=True)
def create_extraction_task():
    try:
        gh_user: str = request.json["gh_user"]
        gh_repo: str = request.json["gh_repo"]
        repo_dir: str = gh_user + "/" + gh_repo
        if request.method == "POST":
            task: Task = db_manager.create_task(
                repo_dir, TaskType.EXTRACTION)
            if task is not None:
                return jsonify({"Added": True, "task_id": task.task_id})
            return ("", 500)
    except ValueError:
        return ("", 400)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO CREATE AN EXTRACTION TASK. "
            "ADDITIONAL INFORMATION: %s, %s", gh_user, gh_repo)
        return ("", 500)


@app.route("/user/<string:gh_user>/repo/<string:gh_repo>", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_repo_info(gh_user: str, gh_repo: str):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        task: Task = db_manager.get_latest_task_from_repo(
            repo_dir, TaskType.EXTRACTION)
        if task.state == TaskState.DONE.value:
            repo: Repository = db_manager.get_repository(repo_dir)
            content: dict = json.loads(str(repo))
            return jsonify(eqlts=content)
        if task.state == TaskState.FAILED.value:
            return ("", 424)
        return ("", 202)
    except TaskNotExistsError:
        return ("", 404)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO RETRIEVE INFORMATION FROM A REPOSITORY. "
            "ADDITIONAL INFORMATION: %s, %s", gh_user, gh_repo)
        return ("", 500)

@app.route("/user/<string:gh_user>/repo/<string:gh_repo>/issue/<int:issue_id>", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_repo_issue(gh_user: str, gh_repo: str, issue_id: int):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        issue = db_manager.get_issue(repo_dir, issue_id)
        return jsonify(eqlts=json.loads(str(issue)))
    except IssueNotExistsError:
        return ("", 404)
    except ValueError:
        return ("", 400)
    except Exception:  # pylint: disable=broad-except
        return ("", 500)

@app.route("/user/<string:gh_user>/repo/<string:gh_repo>/issues", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_repo_issues(gh_user: str, gh_repo: str):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        task: Task = db_manager.get_latest_task_from_repo(
            repo_dir, TaskType.EXTRACTION)
        if task.state == TaskState.DONE.value:
            issues: List[Issue] = db_manager.get_issues(repo_dir)
            content: List[dict] = [json.loads(str(issue)) for issue in issues]
            return jsonify(eqlts=content)
        if task.state == TaskState.FAILED.value:
            return ("", 424)
        return ("", 202)
    except TaskNotExistsError:
        return ("", 404)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO RETRIEVE THE ISSUES FROM A REPOSITORY. "
            "ADDITIONAL INFORMATION: %s, %s", gh_user, gh_repo)
        return ("", 500)


@app.route("/user/<string:gh_user>/repo/<string:gh_repo>/issue/<int:issue_id>/comments", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_issue_comments(gh_user: str, gh_repo: str, issue_id: int):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        task: Task = db_manager.get_latest_task_from_repo(
            repo_dir, TaskType.EXTRACTION)
        if task.state == TaskState.DONE.value:
            comments: List[Comment] = db_manager.get_comments(
                repo_dir, issue_id)
            content: List[dict] = [json.loads(
                str(comment)) for comment in comments]
            return jsonify(eqlts=content)
        if task.state == TaskState.FAILED.value:
            return ("", 424)
        return ("", 202)
    except TaskNotExistsError:
        return ("", 404)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO RETRIEVE THE COMMENTS FROM A ISSUE. "
            "ADDITIONAL INFORMATION: %s, %s, %d", gh_repo, gh_user, issue_id)
        return ("", 500)


@app.route("/user/<string:gh_user>/repo/<string:gh_repo>/tasks", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_repo_tasks(gh_user: str, gh_repo: str):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        tasks: List[Task] = db_manager.get_tasks(repo_dir)
        if tasks:
            content: List[dict] = [json.loads(str(task)) for task in tasks]
            return jsonify(eqlts=content)
        return ("", 204)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO RETRIEVE THE TASKS FROM A REPOSITORY. "
            "ADDITIONAL INFORMATION: %s, %s", gh_repo, gh_user)
        return ("", 500)


@app.route("/user/<string:gh_user>/repo/<string:gh_repo>/experiments", methods=["GET"])
@cross_origin(supports_credentials=True)
def get_repo_outcomes(gh_user: str, gh_repo: str):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        outcomes: List[Outcome] = db_manager.get_outcomes(repo_dir)
        if outcomes:
            content: List[dict] = [json.loads(
                str(outcome)) for outcome in outcomes]
            return jsonify(eqlts=content)
        return ("", 204)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO RETRIEVE THE EXPERIMENTS "
            "FROM A REPOSITORY. ADDITIONAL INFORMATION: %s, %s", gh_repo, gh_user)
        return ("", 500)


@app.route("/user/<string:gh_user>/repo/<string:gh_repo>/process/zsc/", methods=["POST"])
@cross_origin(supports_credentials=True)
def create_zsc_task(gh_user: str, gh_repo: str):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        task: Task = db_manager.get_latest_task_from_repo(
            repo_dir, TaskType.EXTRACTION)
        if task.state == TaskState.DONE.value:
            extra_labels: str = str(request.json["extra_labels"])
            params: dict = {
                "model_type": "zsc",
                "issue_id": int(request.json["issue_id"]),
                "accuracy": float(request.json["accuracy"]),
                "use_desc": bool(request.json["use_desc"]),
                "extra_labels": list(filter(None, map(str.strip, extra_labels.split(';'))))
            }
            task: Task = db_manager.create_task(
                repo_dir, TaskType.PROCESSING, params)

            if task is not None:
                return jsonify({"Added": True, "task_id": task.task_id})
        return ("", 503)
    except ValueError:
        return ("", 400)
    except TypeError:
        return ("", 400)
    except TaskNotExistsError:
        return ("", 406)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO CREATE A ZSC PROCESSING TASK. "
            "ADDITIONAL INFORMATION: %s, %s, %s", gh_user, gh_repo, str(params))
        return ("", 500)


@app.route("/user/<string:gh_user>/repo/<string:gh_repo>/process/sa/", methods=["POST"])
@cross_origin(supports_credentials=True)
def create_sa_task(gh_user: str, gh_repo: str):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        task: Task = db_manager.get_latest_task_from_repo(
            repo_dir, TaskType.EXTRACTION)
        if task.state == TaskState.DONE.value:
            params: dict = {
                "model_type": "sa",
                "issue_id": int(request.json["issue_id"]),
                "author": str(request.json["author"]),
                "with_comments": bool(request.json["with_comments"])
            }
            task: Task = db_manager.create_task(
                repo_dir, TaskType.PROCESSING, params)
            if task is not None:
                return jsonify({"Added": True, "task_id": task.task_id})
        return ("", 503)
    except ValueError:
        return ("", 400)
    except TaskNotExistsError:
        return ("", 406)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO CREATE A SA PROCESSING TASK. "
            "ADDITIONAL INFORMATION: %s, %s, %s", gh_user, gh_repo, str(params))
        return ("", 500)


@app.route("/user/<string:gh_user>/repo/<string:gh_repo>/process/summ/", methods=["POST"])
@cross_origin(supports_credentials=True)
def create_summ_task(gh_user: str, gh_repo: str):
    repo_dir: str = gh_user + "/" + gh_repo
    try:
        task: Task = db_manager.get_latest_task_from_repo(
            repo_dir, TaskType.EXTRACTION)
        if task.state == TaskState.DONE.value:
            params: dict = {
                "model_type": "summ",
                "issue_id": int(request.json["issue_id"]),
                "with_comments": bool(request.json["with_comments"]),
                "max_length": int(request.json["max_length"]),
                "min_length": int(request.json["min_length"])
            }
            task: Task = db_manager.create_task(
                repo_dir, TaskType.PROCESSING, params)
            if task is not None:
                return jsonify({"Added": True, "task_id": task.task_id})
        return ("", 503)
    except ValueError:
        return ("", 400)
    except TaskNotExistsError:
        return ("", 406)
    except Exception:  # pylint: disable=broad-except
        logger.error(
            "AN UNKNOWN EXCEPTION OCCURRED WHILE TRYING TO CREATE A SUMM PROCESSING TASK. "
            "ADDITIONAL INFORMATION: %s, %s, %s", gh_user, gh_repo, str(params))
        return ("", 500)


@ app.route("/test_zsc/", methods=["GET", "POST"])
@cross_origin(supports_credentials=True)
def test_zsc():
    try:
        params = {
            "model_type": "zsc",
            "issue_id": 831250862,
            "accuracy": 0.0,
            "use_desc": False,
            "extra_tags": ["test_tag"]
        }
        task: Task = db_manager.create_task(
            "MrpYA45/github-text-mining-tfg", TaskType.PROCESSING, params)

        if task is not None:
            return jsonify({"Added": True, "task_id": task.task_id})
    except Exception:  # pylint: disable=broad-except
        return ("", 500)


@ app.route("/test_sa/", methods=["GET", "POST"])
@cross_origin(supports_credentials=True)
def test_sa():
    try:
        params = {
            "model_type": "sa",
            "issue_id": 831250862,
            "author": "MrpYA45",
            "with_comments": False
        }
        task: Task = db_manager.create_task(
            "MrpYA45/github-text-mining-tfg", TaskType.PROCESSING, params)

        if task is not None:
            return jsonify({"Added": True, "task_id": task.task_id})
    except Exception:  # pylint: disable=broad-except
        return ("", 500)


@ app.route("/test_summ/", methods=["GET", "POST"])
@cross_origin(supports_credentials=True)
def test_summ():
    try:
        params = {
            "model_type": "summ",
            "issue_id": 831250862,
            "with_comments": False,
            "max_length": 150,
            "min_length": 50
        }
        task: Task = db_manager.create_task(
            "MrpYA45/github-text-mining-tfg", TaskType.PROCESSING, params)

        if task is not None:
            return jsonify({"Added": True, "task_id": task.task_id})
        return ("", 500)
    except Exception:  # pylint: disable=broad-except
        return ("", 500)


if __name__ == "__main__":
    logger = logging.getLogger("gtmapi")
    logging.basicConfig(filename="gtmapi.log",
                        format="[%(levelname)s] %(asctime)s %(message)s [GTMAPI]",
                        datefmt="%m/%d/%Y %I:%M:%S %p", level=logging.DEBUG)
    logger.info("INITIALIZING API MODULE... ")
    app.run(host="172.16.0.11", port=6060, debug=True)
