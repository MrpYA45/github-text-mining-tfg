#!/usr/bin/env python3
import logging
from pathlib import Path

from flask import Flask, json, jsonify, render_template, request
from flask.logging import default_handler
from gtmcore.data.db.schema import Schema
from gtmcore.logic.dbmanager import DBManager

app_path: Path = Path("gtmapi/presentation/web").absolute()
app = Flask(__name__, root_path=app_path)
root_logger = logging.getLogger()
root_logger.addHandler(default_handler)

schema: Schema = Schema()
db_manager: DBManager = DBManager(schema)


@ app.route("/", methods=["GET"])
def is_running():
    # ("", 200, {"Content-Type": "text/plain"})
    return render_template("index.html")


@ app.route("/tasks/", methods=["GET"])
def get_all_tasks():
    tasks = db_manager.get_tasks()
    return jsonify(eqtls=[str(task) for task in tasks])


@ app.route("/task/", methods=["GET", "POST"])
def create_task():
    try:
        gh_user: str = request.form.get("gh_user")
        gh_repo: str = request.form.get("gh_repo")
        repo_dir: str = gh_user + "/" + gh_repo
        if request.method == "POST":
            task_added = db_manager.create_task(repo_dir)
            response = app.response_class(
                response=json.dumps({"AÃ±adido": task_added is not None}),
                status=200,
                mimetype='application/json'
            )
        else:
            task = db_manager.get_task(repo_dir)
            response = app.response_class(
                response=jsonify(str(task)),
                status=200,
                mimetype='application/json'
            )
        return response
    except ValueError:
        return False


if __name__ == "__main__":
    logger = logging.getLogger("gtmapi")
    logging.basicConfig(filename="gtmapi.log",
                        format="[%(levelname)s] %(asctime)s %(message)s",
                        datefmt="%m/%d/%Y %I:%M:%S %p", level=logging.DEBUG)
    logger.info("[GTMApi] INITIALIZING API MODULE... ")
    app.run(host="172.16.0.11", port=6060, debug=True)
