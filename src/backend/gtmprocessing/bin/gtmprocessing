#!/usr/bin/env python3

# Copyright (C) 2021 Pablo Fern√°ndez Bravo
#
# This file is part of github-text-mining-tfg.
#
# github-text-mining-tfg is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# github-text-mining-tfg is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with github-text-mining-tfg.  If not, see <http://www.gnu.org/licenses/>.

import logging
import time
from threading import Thread

from gtmcore.data.db import Schema
from gtmcore.data.db.enums import TaskState, TaskType
from gtmcore.data.db.err.repositorynotexistserror import \
    RepositoryNotExistsError
from gtmcore.data.db.err.tasknotexistserror import TaskNotExistsError
from gtmcore.data.db.results.task import Task
from gtmcore.logic.dbmanager import DBManager
from gtmprocessing.data.err.invalidnlpmodel import InvalidNLPModel
from gtmprocessing.logic.processingmanager import ProcessingManager


class GTMProcessing():

    def __init__(self):
        schema: Schema = Schema()
        self.__db_manager: DBManager = DBManager(schema)

        self.current_task: Task = None

    def run(self):
        logger.info("[GTMProcessing] Running...")
        while True:
            task = self.get_next_queued_task()
            if task and self.current_task is None:
                logger.debug(
                    "[GTMProcessing] NEW TASK FOUND. TASK_ID: %d | TASK_REPO: %s | CREATED AT: %s",
                    task.task_id, task.repo_dir, task.timestamp)
                self.__db_manager.update_task_state(
                    task.task_id, TaskState.IN_PROGRESS)

                self.current_task = task
                Thread(target=self.process_task, args=(task,)).start()

            time.sleep(10)

    def get_next_queued_task(self) -> Task:
        try:
            return self.__db_manager.get_oldest_task_with_state(TaskType.PROCESSING, TaskState.QUEUED)
        except TaskNotExistsError:
            return None

    def process_task(self, task: Task) -> None:
        try:
            if ProcessingManager(self.__db_manager).process_task(task):
                self.__db_manager.update_task_state(task.task_id, TaskState.DONE)

        except InvalidNLPModel:
            self.__db_manager.update_task_state(task.task_id, TaskState.FAILED)
            logger.exception(
                "[GTMProcessing] INVALID TASK. SET AS INVALID. REASON: INVALID NLP MODEL.")

        except RepositoryNotExistsError:
            self.__db_manager.update_task_state(task.task_id, TaskState.FAILED)
            logger.exception(
                "[GTMProcessing] INVALID TASK. SET AS INVALID. REASON: INVALID REPOSITORY.")

        except Exception:  # pylint: disable=broad-except
            logger.exception(
                "[GTMProcessing] INVALID TASK. SET AS INVALID. REASON: UNKNOWN EXCEPTION.")
            self.__db_manager.update_task_state(task.task_id, TaskState.FAILED)

        finally:
            self.current_task = None


if __name__ == "__main__":
    logger = logging.getLogger("gtmprocessing")
    logging.basicConfig(filename="gtmprocessing.log",
                        format="[%(levelname)s] %(asctime)s %(message)s",
                        datefmt="%m/%d/%Y %I:%M:%S %p", level=logging.DEBUG)
    logger.info("[GTMProcessing] INITIALIZING PROCESSING MODULE... ")
    processing = GTMProcessing()
    processing.run()
